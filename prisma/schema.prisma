// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Invoice       Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End of Next auth

enum InvoiceStatus {
  paid
  pending
  draft
}

model Invoice {
  id               String        @id @default(cuid())
  amount           Int
  description      String
  status           InvoiceStatus
  clientName       String
  clientEmail      String
  date             DateTime
  paymentTermsDays Int
  dueDate          DateTime // Due date is calculated from date + paymentTerms

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Items  Item[]

  @@index([userId])
}

model Item {
  id          String   @id @default(cuid())
  name        String
  quantity    Int
  price       Int
  description String? // Should this be a relation to a product?
  Invoice     Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId   String?

  @@index([invoiceId])
}
