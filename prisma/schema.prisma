generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  profile Profile?
}

enum ProfileRole {
  ADMIN
  MANAGER
  SUPERVISOR
  EMPLOYEE
}

// Business models
model Profile {
  id         String      @id @default(cuid())
  firstName  String
  lastName   String
  phone      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  dob        DateTime
  role       ProfileRole
  isVerified Boolean     @default(false)

  address Address @relation(fields: [addressId], references: [id])

  projectMember ProjectMember[]
  bankAccount   BankAccount[]

  shift    Shift[]
  invoices Invoices[]

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs Logs[]

  userId    String @unique
  addressId String @unique
}

model Project {
  id        String        @id @default(cuid())
  name      String
  // clientId String? // TODO: Make this a relation to a client model
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  startDate DateTime
  endDate   DateTime?
  status    ProjectStatus @default(INACTIVE)

  members ProjectMember[]
  shift   Shift[]
  logs    Logs[]

  addressId String  @unique
  address   Address @relation(fields: [addressId], references: [id])
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectRole {
  MANAGER
  ADMIN
  SUPERVISOR
}

model ProjectMember {
  id   String      @id @default(cuid())
  role ProjectRole

  profile   Profile @relation(fields: [profileId], references: [userId])
  profileId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([projectId])
}

model Shift {
  id        String   @id @default(cuid())
  start     DateTime
  end       DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [userId])
  profileId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@index([profileId])
  @@index([projectId])
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
  DRAFT
}

model Invoices {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  dueDate   DateTime
  paidDate  DateTime?
  amount    Float
  status    InvoiceStatus

  profile   Profile @relation(fields: [profileId], references: [userId])
  profileId String

  @@index([profileId])
}

model BankAccount {
  id        String   @id @default(cuid())
  bankName  String
  bsb       String
  account   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [userId])
  profileId String  @unique

  @@index([profileId])
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zip       Int
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile?
  project Project?
}

model Logs {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  action    LogAction
  type      LogType
  message   String
  meta      Json?

  profile   Profile? @relation(fields: [profileId], references: [userId])
  profileId String?  @unique

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @unique
}

enum LogType {
  PROFILE
  PROJECT
  INVOICE
  SHIFT
  BANK_ACCOUNT
  ADDRESS
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}
